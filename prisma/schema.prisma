// prisma schema docs: https://pris.ly/d/prisma-schema 

// run 'npx prisma generate' after a schema change to update the prisma client
// run 'npx prisma db push' to push schema changes to planetscale
// run 'npx prisma format' to auto format
// run 'npm run prisma' to run the prisma cli

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"              // planetscale
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

  //---------------------------------------------------------------------------//
model views {
  slug  String @id @db.VarChar(128)
  count BigInt @default(1)
}

model guestbook {
  id         BigInt   @id @default(autoincrement())    // unique identifier
  email      String   @db.VarChar(256)                 // email address, 
  content    String   @db.VarChar(500)                 // message content
  created_by String   @db.VarChar(256)                 // name of the person who created the message
  created_at DateTime @default(now()) @db.DateTime(6)  // when the message was created
  updated_at DateTime @default(now()) @db.DateTime(6)  // do we allow them to edit?
}

// NextAuth Schema
// fk you nextauth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?   @db.Text
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
